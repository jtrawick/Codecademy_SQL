-- **Below are my solutions to the How to Hack Hacker News Challenge from Codecademy found at:
-- https://www.codecademy.com/paths/data-science/tracks/sql-intermediate/modules/dspath-sql-aggregates-projects-and-applications/projects/sql-hackernews.
-- **I wanted to save some of the solutions due to some of the alterations I made.
-- **Instructions preceed each problem and solution.
-- **My comments will include ** at the beginning

-- 1. Start by getting a feel for the hacker_news table!
-- Let’s find the most popular Hacker News stories:
-- What are the top five stories with the highest scores?

SELECT title, score
FROM hacker_news
ORDER BY score DESC
LIMIT 5;

-- 2. Recent studies have found that online forums tend to be dominated by a small percentage of their users (1-9-90 Rule).
-- Is this true of Hacker News?
-- Is a small percentage of Hacker News submitters taking the majority of the points?
-- First, find the total score of all the stories.

SELECT title, score
FROM hacker_news
ORDER BY score DESC
LIMIT 5;

-- 3. Next, we need to pinpoint the users who have accumulated a lot of points across their stories.
-- Find the individual users who have gotten combined scores of more than 200, and their combined scores.
-- GROUP BY and HAVING are needed!

SELECT SUM(score)
FROM hacker_news;

-- 4. Then, we want to add these users’ scores together and divide by the total to get the percentage.
-- Add their scores together and divide it by the total sum. 
-- Like so:
-- SELECT (1.0 + 2.0 + 3.0) / 6.0;
-- So, is Hacker News dominated by these users?

SELECT user, SUM(score)
FROM hacker_news
GROUP BY user
HAVING SUM(score) > 200
ORDER BY 2 DESC;

-- 5. Oh no! While we are looking at the power users, some users are rickrolling — tricking readers into clicking on a link to a funny video and claiming that it links to information about coding.
-- The url of the video is:
-- https://www.youtube.com/watch?v=dQw4w9WgXcQ
-- How many times has each offending user posted this link?

-- **Wrote this slightly modified: the statment pulls values from the table directly and executes the division. Could not find a way to round to two decimal points.
-- **Future small project: find a way to round the result to two deicmal points or, better yet, a way to display as a percentage.

SELECT
CAST((SELECT SUM(score) FROM hacker_news WHERE user IN ('vxNsr', 'amirkhella', 'dmmalam', 'metafunctor')) AS FLOAT)/(SELECT SUM(score) FROM hacker_news) AS 'Total';

-- 6. Hacker News stories are essentially links that take users to other websites.
-- Which of these sites feed Hacker News the most:
-- _GitHub, Medium, or New York Times?_
-- First, we want to categorize each story based on their source.
-- We can do this using a CASE statement:

-- SELECT CASE
--    WHEN url LIKE '%github.com%' THEN 'GitHub'
--    -- WHEN statement here
--    -- WHEN statement here
--    -- ELSE statement here
--   END AS 'Source'
-- FROM hacker_news;

-- Fill in the other WHEN statements and the ELSE statement.

-- **Slightly different than the official solution, but the result set is the same

SELECT user, COUNT(url)
FROM hacker_news
GROUP BY user
HAVING url LIKE 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'
ORDER BY COUNT(url) DESC;

-- 7. Next, build on the previous query:
-- Add a column for the number of stories from each URL using COUNT().
-- Also, GROUP BY the CASE statement.
-- Remember that you can refer to a column in GROUP BY using a number.

-- **Modified to make the non-target sources NULL and removed all but the three target URLs from the result set. Also prettied it up a bit and included other GitHub domains (ie. .io).

SELECT 
  CASE
    WHEN url LIKE '%github.%' THEN 'GitHub'
    WHEN url LIKE '%medium.%' THEN 'Medium'
    WHEN url LIKE '%nytimes%' THEN 'NYT'
    ELSE NULL
  END AS 'Source',
COUNT(*) AS 'Total Uses'
FROM hacker_news
GROUP BY 1
HAVING Source IS NOT NULL
ORDER BY 2 DESC;

-- 8. Every submitter wants their story to get a high score so that the story makes it to the front page, but…
-- What’s the best time of the day to post a story on Hacker News?
-- Before we get started, let’s run this query and take a look at the timestamp column:

-- SELECT timestamp
-- FROM hacker_news
-- LIMIT 10;

-- Notice that the values are formatted like:
-- 2018-05-08T12:30:00Z
-- If you ignore the T and Z, the format is:
-- YYYY-MM-DD HH:MM:SS

SELECT timestamp
FROM hacker_news
LIMIT 10;

-- 9. SQLite comes with a strftime() function - a very powerful function that allows you to return a formatted date.
-- It takes two arguments:
-- strftime(format, column)
-- Let’s test this function out:

-- SELECT timestamp,
--    strftime('%H', timestamp)
-- FROM hacker_news
-- GROUP BY 1
-- LIMIT 20;

-- What do you think this does? Open the hint if you’d like to learn more.

-- **The strftime('%H', timestamp) function seems to print only the hour of the corresponding timestamp  

SELECT timestamp,
  strftime('%H', timestamp)
FROM hacker_news
GROUP BY 1
LIMIT 20; 

-- 10. Okay, now we understand how strftime() works. Let’s write a query that returns three columns:
-- The hours of the timestamp
-- The average score for each hour
-- The count of stories for each hour

SELECT strftime('%H', timestamp) AS 'Hour', ROUND(AVG(score), 1) AS 'Avg_Score', COUNT(*) AS 'Total_Posts'
FROM hacker_news
GROUP BY 1
HAVING Avg_Score IS NOT NULL
ORDER BY Avg_Score DESC;

-- **This query does a lot. I wanted to make the strftime output look a little cleaner, so I changed the output to HH AM/PM format. Additionally, cleaned up with aliases, rounded AVG and ordered by AVG.

SELECT 
  CASE
    WHEN strftime('%H', timestamp) = '00' THEN '12 AM'
    WHEN strftime('%H', timestamp) = '01' THEN '1 AM'
    WHEN strftime('%H', timestamp) = '02' THEN '2 AM'
    WHEN strftime('%H', timestamp) = '03' THEN '3 AM'
    WHEN strftime('%H', timestamp) = '04' THEN '4 AM'
    WHEN strftime('%H', timestamp) = '05' THEN '5 AM'
    WHEN strftime('%H', timestamp) = '06' THEN '6 AM'
    WHEN strftime('%H', timestamp) = '07' THEN '7 AM'
    WHEN strftime('%H', timestamp) = '08' THEN '8 AM'
    WHEN strftime('%H', timestamp) = '09' THEN '9 AM'
    WHEN strftime('%H', timestamp) = '10' THEN '10 AM'
    WHEN strftime('%H', timestamp) = '11' THEN '11 AM'
    WHEN strftime('%H', timestamp) = '12' THEN '12 PM'
    WHEN strftime('%H', timestamp) = '13' THEN '1 PM'
    WHEN strftime('%H', timestamp) = '14' THEN '2 PM'
    WHEN strftime('%H', timestamp) = '15' THEN '3 PM'
    WHEN strftime('%H', timestamp) = '16' THEN '4 PM'
    WHEN strftime('%H', timestamp) = '17' THEN '5 PM'
    WHEN strftime('%H', timestamp) = '18' THEN '6 PM'
    WHEN strftime('%H', timestamp) = '19' THEN '7 PM'
    WHEN strftime('%H', timestamp) = '20' THEN '8 PM'
    WHEN strftime('%H', timestamp) = '21' THEN '9 PM'
    WHEN strftime('%H', timestamp) = '22' THEN '10 PM' 
    WHEN strftime('%H', timestamp) = '23' THEN '11 PM' 
    ELSE NULL
  END AS 'Hour', 
  ROUND(AVG(score), 1) AS 'Avg_Score', 
  COUNT(*) AS 'Total_Posts'
FROM hacker_news
GROUP BY 1
HAVING Avg_Score IS NOT NULL
ORDER BY Avg_Score DESC;

-- 11. Let’s edit a few things in the previous query:
-- Round the average scores (ROUND()).
-- Rename the columns to make it more readable (AS).
-- Add a WHERE clause to filter out the NULL values in timestamp.
-- Take a look at the result again:
-- What are the best hours to post a story on Hacker News?

-- **All of this has been accomplished (and more) in the previous solution.

-- **Thanks!